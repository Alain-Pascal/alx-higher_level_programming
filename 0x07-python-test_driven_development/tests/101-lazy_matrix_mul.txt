The ``101-lazy_matrix_mul`` module
============================
Using ``lazy_matrix_mul``
-------------------
>>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

# Basic square matrices
>>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
array([[ 7, 10],
       [15, 22]])

# Rectangular matrices
>>> lazy_matrix_mul([[1, 2]], [[3, 4], [5, 6]])
array([[13, 16]])

# Larger matrices
>>> lazy_matrix_mul([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[9, 8, 7], [6, 5, 4], [3, 2, 1]])
array([[ 30,  24,  18],
       [ 84,  69,  54],
       [138, 114,  90]])

# Matrices with floats
>>> lazy_matrix_mul([[1.5, 2.0], [3.0, 4.5]], [[5.0, 6.0], [7.0, 8.0]])
array([[21.5, 25. ],
       [46.5, 54. ]])

# Single element matrices
>>> lazy_matrix_mul([[3]], [[4]])
array([[12]])

# Non-square matrices
>>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2, 3], [4, 5, 6]])
array([[ 9, 12, 15],
       [19, 26, 33]])


# Incompatible dimensions

# m_a is not a list
>>> try:
...     lazy_matrix_mul(1, [[1, 2], [3, 4]])
... except TypeError as e:
...     print(e)
Scalar operands are not allowed, use '*' instead

# m_b is not a list
>>> try:
...     lazy_matrix_mul([[1, 2], [3, 4]], 1)
... except TypeError as e:
...     print(e)
Scalar operands are not allowed, use '*' instead

# m_a is not a list of lists
>>> try:
...     lazy_matrix_mul([[1, 2], 3], [[1, 2], [3, 4]])
... except TypeError as e:
...     print(e)
m_a must be a list of lists

# m_b is not a list of lists
>>> try:
...     lazy_matrix_mul([[1, 2]], [[1, 2], 3])
... except TypeError as e:
...     print(e)
m_b must be a list of lists

# m_a contains non-number elements
>>> try:
...     lazy_matrix_mul([[1, 'a']], [[1, 2]])
... except TypeError as e:
...     print(e)
invalid data type for einsum

# m_b contains non-number elements
>>> try:
...     lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 'a']])
... except TypeError as e:
...     print(e)
invalid data type for einsum

>>> try:
...     lazy_matrix_mul([[1, 2], [3]], [[1, 2], [3, 4]])
... except TypeError as e:
...     print(e)
setting an array element with a sequence.

>>> try:
...    lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3]])
... except TypeError as e:
...    print(e)
setting an array element with a sequence.

# Empty matrix m_a

# m_a is an empty list of lists
>>> try:
...     lazy_matrix_mul([[]], [[1, 2]])
... except ValueError as e:
...     print(e)
matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 1 is different from 0)

# m_a is an empty list of lists
>>> try:
...     lazy_matrix_mul([[]], [[1, 2], [3, 4]])
... except ValueError as e:
...     print(e)
matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 2 is different from 0)

# Empty matrix m_b
>>> try:
...     lazy_matrix_mul([[1, 2]], [])
... except ValueError as e:
...     print(e)
matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 0 is different from 2)

# m_b is an empty list of lists
>>> try:
...     lazy_matrix_mul([[1, 2]], [[]])
... except ValueError as e:
...     print(e)
matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 1 is different from 2)

# Missing argument m_b
>>> try:
...     lazy_matrix_mul([[1, 2], [3, 4]])
... except TypeError as e:
...     print(e)
lazy_matrix_mul() missing 1 required positional argument: 'm_b'

# Nissing both arguments
>>> try:
...     lazy_matrix_mul()
... except TypeError as e:
...     print(e)
lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'
