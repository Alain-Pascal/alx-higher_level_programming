The ``100-matrix_mul`` module
============================
Using ``matrix_mul``
-------------------
>>> matrix_mul = __import__('100-matrix_mul').matrix_mul
>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
[[7, 10], [15, 22]]
>>> matrix_mul([[1, 2]], [[3, 4], [5, 6]])
[[13, 16]]
>>> matrix_mul([[1, 2, 3]], [[4], [5], [6]])
[[32]]
>>> try:
...     matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4], [5, 6]])
... except ValueError as e:
...     print(e)
m_a and m_b can't be multiplied
>>> try:
...     matrix_mul(1, [[1, 2], [3, 4]])
... except TypeError as e:
...     print(e)
m_a must be a list
>>> try:
...     matrix_mul([[1, 2], [3, 4]], 1)
... except TypeError as e:
...     print(e)
m_b must be a list
>>> try:
...     matrix_mul([[1, 2], 3], [[1, 2], [3, 4]])
... except TypeError as e:
...     print(e)
m_a must be a list of lists
>>> try:
...     matrix_mul([[1, 2]], [1, 2])
... except TypeError as e:
...     print(e)
m_b must be a list of lists
>>> try:
...     matrix_mul([[1, 'a']], [[1, 2]])
... except TypeError as e:
...     print(e)
m_a should contain only integers or floats
>>> try:
...     matrix_mul([[1, 2], [3]], [[1, 2], [3, 4]])
... except TypeError as e:
...     print(e)
each row of m_a must be of the same size
>>> try:
...     matrix_mul([[]], [[1, 2]])
... except ValueError as e:
...     print(e)
m_a can't be empty
>>> try:
...     matrix_mul([[1, 2]], [[]])
... except ValueError as e:
...     print(e)
m_b can't be empty
